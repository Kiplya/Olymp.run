services:
  db:
    image: postgres:alpine
    container_name: olymprun_db
    restart: unless-stopped

    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: olymprun_db
    ports:
      - "5432:5432"

    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - olymprun

  judge0_db:
    image: postgres:alpine
    container_name: olymprun_judge0_db
    restart: unless-stopped

    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: olymprun_judge0_db
    ports:
      - "6000:5432"

    volumes:
      - judge0_db_data:/var/lib/postgresql/data
    networks:
      - olymprun

  judge0_redis:
    image: redis:latest
    container_name: olymprun_judge0_redis
    restart: unless-stopped

    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - olymprun

  judge0:
    build: .
    container_name: olymprun_judge0
    restart: unless-stopped

    ports:
      - "5000:5000"
    depends_on:
      - judge0_db
      - judge0_redis

    environment:
      - POSTGRES_HOST=judge0_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

      - PORT=5000
      - REDIS_HOST=judge0_redis
    privileged: true

    volumes:
      - judge0_box:/box
    networks:
      - olymprun

  backend:
    build: ./backend
    container_name: olymprun_backend

    ports:
      - "8000:8000"
    depends_on:
      - db
      - judge0

    environment:
      MODE: production
      BACKEND_PORT: 8000
      CRYPT_KEY: ${CRYPT_KEY}
      CRYPT_IV: ${CRYPT_IV}
      JUDGE0_API_URL: http://judge0:5000

      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: olymprun_db
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/olymprun_db?schema=public

    volumes:
      - ./shared:/app/shared:ro
    command: sh -c "npx prisma migrate deploy && npx prisma generate && npm run start"
    networks:
      - olymprun

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        SHARED_PATH: "./shared"
        PORT: 3000
        VITE_API_URL: "/api"
    container_name: olymprun_frontend

    ports:
      - "3000:3000"
    depends_on:
      - backend

    networks:
      - olymprun
    volumes:
      - ./shared:/app/shared:ro
      - frontend_build:/frontend_build

  nginx:
    image: nginx:alpine
    container_name: olymprun_nginx

    depends_on:
      - frontend
    ports:
      - "80:80"

    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend_build:/usr/share/nginx/html:ro
    networks:
      - olymprun

volumes:
  judge0_db_data:
  judge0_box:
  redis_data:
  db_data:
  frontend_build:

networks:
  olymprun:
