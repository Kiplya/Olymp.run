generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model session {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  token      String    @db.Text @unique
  createdAt DateTime   @default(now()) @db.Timestamptz(0)
  
  userId    String     @db.Uuid

  user       user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id       String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  login    String      @db.Text @unique
  password String      @db.Text
  isAdmin  Boolean     @default(false)

  sessions session[]
  contests contestParticipant[]
}

model contest {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  title         String      @db.Text @unique
  startTime     DateTime    @db.Timestamptz(0)
  endTime       DateTime    @db.Timestamptz(0)

  tasks         contestTask[]
  participants  contestParticipant[]
}

model contestParticipant {
  score          Int          @default(0)
  tasks          contestParticipantTask[]

  userId         String       @db.Uuid
  contestId      String       @db.Uuid

  user           user        @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest        contest      @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@id([userId, contestId])
}

model contestParticipantTask {
  score       Int

  userId      String              @db.Uuid
  contestId   String              @db.Uuid
  taskId      String              @db.Uuid

  task        contestTask         @relation(fields: [contestId, taskId], references: [contestId, taskId], onDelete: Cascade)
  participant contestParticipant  @relation(fields: [userId, contestId], references: [userId, contestId], onDelete: Cascade)

  @@id([userId, contestId, taskId])
}

model contestTask {
  order            Int
  participantTasks contestParticipantTask[] 

  contestId        String       @db.Uuid
  taskId           String       @db.Uuid

  contest          contest      @relation(fields: [contestId], references: [id], onDelete: Cascade)
  task             task         @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([contestId, taskId])
}

model task {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  title          String       @db.Text @unique
  description    String       @db.Text

  exampleInput   String       @db.Text
  exampleOutput  String       @db.Text

  timeLimit      Int
  memoryLimit    Int
  difficulty     difficulty

  contests       contestTask[]
  tests          taskTest[]
}

model taskTest {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  order             Int
  input             String       @db.Text
  expectedOutput    String       @db.Text

  taskId            String       @db.Uuid
  task              task         @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

enum difficulty {
  easy
  medium
  hard
}
